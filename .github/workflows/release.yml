name: Rust CI & Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  # We still define the binary name here for use inside the job steps.
  BINARY_NAME: portdog

jobs:
  # This CI job remains unchanged and is good practice.
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test --verbose

  # This job handles the entire release process.
  release:
    name: Build & Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            # --- FIX: Hardcode 'portdog' instead of using env context ---
            archive_name: portdog-${{ github.ref_name }}-linux-x86_64.tar.gz
            asset_name: portdog

          - os: macos-latest
            target: x86_64-apple-darwin
            # --- FIX: Hardcode 'portdog' instead of using env context ---
            archive_name: portdog-${{ github.ref_name }}-macos-x86_64.tar.gz
            asset_name: portdog

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            # --- FIX: Hardcode 'portdog' instead of using env context ---
            archive_name: portdog-${{ github.ref_name }}-windows-x86_64.zip
            asset_name: portdog.exe

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies for Linux (for cross-compilation if needed)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Prepare release archive (Windows)
        if: matrix.os == 'windows-latest'
        # Use PowerShell's native compression tool for better reliability.
        shell: pwsh
        run: |
          Compress-Archive -Path "target/${{ matrix.target }}/release/${{ matrix.asset_name }}" -DestinationPath "${{ matrix.archive_name }}"
          echo "ASSET_PATH=${{ matrix.archive_name }}" >> $env:GITHUB_ENV

      - name: Prepare release archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          tar -czvf "${{ matrix.archive_name }}" -C "target/${{ matrix.target }}/release" "${{ matrix.asset_name }}"
          echo "ASSET_PATH=${{ matrix.archive_name }}" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET_PATH }}
          generate_release_notes: true
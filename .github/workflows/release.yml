# .github/workflows/release.yml

name: Rust CI & Release

on:
  push:
    # Run on pushes to the main branch and on version tags (e.g., v1.0, v1.2.3).
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  # Set the binary name for easy re-use
  BINARY_NAME: portdog

jobs:
  # This job is for Continuous Integration: build and test on all platforms.
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test --verbose

  # This job handles the entire release process.
  release:
    name: Build & Release
    # Only run this job if a version tag was pushed.
    if: startsWith(github.ref, 'refs/tags/v')
    # This job needs the 'test' job to succeed first.
    needs: test
    # Use a matrix to build for all three target platforms.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux-x86_64.tar.gz
            asset_name: ${{ env.BINARY_NAME }}

          - os: macos-latest
            target: x86_64-apple-darwin
            archive_name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos-x86_64.tar.gz
            asset_name: ${{ env.BINARY_NAME }}

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows-x86_64.zip
            asset_name: ${{ env.BINARY_NAME }}.exe

    # Grant permissions to the job to create a release.
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies for Linux (for cross-compilation if needed)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Prepare release archive
        # Use shell scripting to package the binary into a compressed archive.
        shell: bash
        run: |
          # On Windows, the output path uses backslashes
          BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.asset_name }}"

          # Create the archive
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "${{ matrix.archive_name }}" "$BINARY_PATH"
          else
            tar -czvf "${{ matrix.archive_name }}" -C "target/${{ matrix.target }}/release" "${{ matrix.asset_name }}"
          fi

          # Set the path for the upload step
          echo "ASSET_PATH=${{ matrix.archive_name }}" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload Assets
        # This powerful action creates the release page and uploads our archives.
        uses: softprops/action-gh-release@v2
        with:
          # Use the contents of the archive as the files to upload.
          files: ${{ env.ASSET_PATH }}
          # Automatically generate the release notes from your commit history.
          generate_release_notes: true